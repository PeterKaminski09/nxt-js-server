#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('robonode:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
let sockets = {};
let lockedSockets = {};

//Add socket io initial connection here
io.on('connection', (socket) => {

  console.log(socket.id, 'grabbing a new connection');

  socket.emit('connect', {message: 'Welcome to the server! ' + socket.id});
  //When a client connects, be sure to store the mac address with the socket id
  socket.on('register nxts', (data) => {
    //Each socket will contain a number of mac addresses. We'll pair each mac address to the given socket
    if (data.addresses){
      data.addresses.forEach((address) => {
        sockets[address] = socket;
      });
    }
  });

  //When asked for available NXTs, send the list of available mac addresses
  socket.on('get available nxts', (data) => {
    socket.emit('available nxts', { addresses: Object.keys(sockets)});
  });


  //Whenever an ipad socket tells us to run some code, we'll find the socket for the python client and emit an execute code statement
  socket.on('run code', (data) => {
    data = data.replace(/\\n/g, "\\n")
                 .replace(/\\'/g, "\\'")
                 .replace(/\\"/g, '\\"')
                 .replace(/\\&/g, "\\&")
                 .replace(/\\r/g, "\\r")
                 .replace(/\\t/g, "\\t")
                 .replace(/\\b/g, "\\b")
                 .replace(/\\f/g, "\\f");
    // remove non-printable and other non-valid JSON chars
    data = data.replace(/[\u0000-\u0019]+/g,"");
    const jsonData = JSON.parse(data);
    console.log(jsonData, 'DATA DATA');
    if (jsonData.address){
      const nxtSocket = sockets[jsonData.address];
      const commands = jsonData.commands || [];
      console.log(nxtSocket.id, ' waiting for the lock');
      while(lockedSockets[nxtSocket.id]){
        //Wait for the socket to be released
      }
      console.log("Socket is unlocked");
      if (nxtSocket){
        lockedSockets[nxtSocket.id] = true;
        nxtSocket.emit('execute code', { address: jsonData.address, commands: commands});
      } else {
        console.log("SOCKET NOT FOUND " + jsonData.address);
      }
    }
  });

  socket.on('finished program', function() {
    delete lockedSockets[socket.id]; //Remove the socket from our bank
    console.log(socket.id + ' unlocked');
  });

  socket.on('disconnect', function() {
    delete sockets[socket.id]; //Remove the socket from our bank
    console.log(socket.id + ' has disconnected from the server');
  });

});

app.set('sockets', sockets);
app.set('socketio', io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
